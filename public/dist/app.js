/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Matrix.ts":
/*!***********************!*\
  !*** ./src/Matrix.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Matrix = /** @class */ (function () {\n    /**\n     * @param rows {number}\n     * @param columns {number}\n     */\n    function Matrix(rows, columns) {\n        this.rows = rows;\n        this.cols = columns;\n        this.setup();\n    }\n    /**\n     * @returns {number}\n     */\n    Matrix.prototype.getRows = function () {\n        return this.rows;\n    };\n    /**\n     * @returns {number}\n     */\n    Matrix.prototype.getCols = function () {\n        return this.cols;\n    };\n    /**\n     * Create matrix from array\n     *\n     * @param inputMatrix\n     */\n    Matrix.prototype.make = function (inputMatrix) {\n        if (inputMatrix.length == this.rows && inputMatrix[0].length == this.cols) {\n            this.entries = inputMatrix;\n        }\n    };\n    /**\n     * Fill Random RxC matrix\n     */\n    Matrix.prototype.randomize = function () {\n        for (var r = 0; r < this.rows; r++) {\n            for (var c = 0; c < this.cols; c++) {\n                this.entries[r][c] = this.rand();\n            }\n        }\n    };\n    ;\n    /**\n     *\n     */\n    Matrix.prototype.toArray = function () {\n        return this.entries;\n    };\n    /**\n     * Adds two matricies together element wise\n     *\n     * @param multiplier Matrix\n     */\n    Matrix.prototype.add = function (multiplier) {\n        if (multiplier instanceof Matrix) {\n            for (var r = 0; r < this.rows; r++) {\n                for (var c = 0; c < this.cols; c++) {\n                    this.entries[r][c] += multiplier.entries[r][c];\n                }\n            }\n        }\n        else {\n            for (var r = 0; r < this.rows; r++) {\n                for (var c = 0; c < this.cols; c++) {\n                    this.entries[r][c] += multiplier;\n                }\n            }\n        }\n        return this;\n    };\n    /**\n     * Subtract element wise\n     *\n     * @param multiplier Matrix\n     */\n    Matrix.prototype.subtract = function (multiplier) {\n        if (multiplier instanceof Matrix) {\n            for (var r = 0; r < this.rows; r++) {\n                for (var c = 0; c < this.cols; c++) {\n                    this.entries[r][c] -= multiplier.entries[r][c];\n                }\n            }\n        }\n        else {\n            for (var r = 0; r < this.rows; r++) {\n                for (var c = 0; c < this.cols; c++) {\n                    this.entries[r][c] -= multiplier;\n                }\n            }\n        }\n        return this;\n    };\n    /**\n     * Subtract element wise\n     *\n     * @param multiplier Matrix\n     */\n    Matrix.subtract = function (matrix, matrixB) {\n        var newMatrix = new Matrix(matrix.getRows(), matrix.getCols());\n        var copiedEntries = matrix.copy();\n        if (matrixB instanceof Matrix) {\n            for (var r = 0; r < matrixB.rows; r++) {\n                for (var c = 0; c < matrixB.cols; c++) {\n                    copiedEntries[r][c] -= matrixB.entries[r][c];\n                }\n            }\n        }\n        else {\n            for (var r = 0; r < matrix.rows; r++) {\n                for (var c = 0; c < matrix.cols; c++) {\n                    copiedEntries[r][c] -= matrixB;\n                }\n            }\n        }\n        newMatrix.make(copiedEntries);\n        return newMatrix;\n    };\n    /**\n     *\n     * @param matrix\n     */\n    Matrix.transpose = function (matrix) {\n        var newMatrix = new Matrix(matrix.getCols(), matrix.getRows());\n        for (var r = 0; r < newMatrix.getRows(); r++) {\n            for (var c = 0; c < newMatrix.getCols(); c++) {\n                newMatrix.entries[r][c] = matrix.entries[c][r];\n            }\n        }\n        return newMatrix;\n    };\n    /**\n     * Multiplication of Matrix by Scallar or by Matrix\n     *\n     * @param matrix\n     * @param multiplier\n     * @return Matrix\n     */\n    Matrix.multy = function (matrix, multiplier) {\n        var result;\n        var matrixCopy = matrix.copy();\n        if (typeof multiplier == \"number\") {\n            result = new Matrix(matrix.rows, matrix.cols);\n            for (var r = 0; r < matrix.rows; r++) {\n                for (var c = 0; c < matrix.cols; c++) {\n                    matrixCopy[r][c] = matrixCopy[r][c] * multiplier;\n                }\n            }\n            result.make(matrixCopy);\n        }\n        else {\n            result = new Matrix(matrix.rows, multiplier.cols);\n            var newMatrix = [];\n            for (var r = 0; r < matrix.rows; r++) {\n                var newRow = [];\n                for (var mC = 0; mC < multiplier.cols; mC++) {\n                    var rowRes = 0;\n                    for (var c = 0; c < matrix.cols; c++) {\n                        rowRes += matrix.entries[r][c] * multiplier.entries[c][mC];\n                    }\n                    newRow.push(rowRes);\n                }\n                newMatrix.push(newRow);\n            }\n            result.make(newMatrix);\n        }\n        return result;\n    };\n    /**\n     * Multiplication of Matrix by Scallar or by Matrix\n     *\n     * @param matrix\n     * @param multiplier\n     * @return Matrix\n     */\n    Matrix.multyElWise = function (matrix, multiplier) {\n        var result;\n        var matrixCopy = matrix.copy();\n        if (typeof multiplier == \"number\") {\n            result = new Matrix(matrix.rows, matrix.cols);\n            for (var r = 0; r < matrix.rows; r++) {\n                for (var c = 0; c < matrix.cols; c++) {\n                    matrixCopy[r][c] = matrixCopy[r][c] * multiplier;\n                }\n            }\n            result.make(matrixCopy);\n        }\n        else {\n            result = new Matrix(matrix.rows, multiplier.cols);\n            for (var r = 0; r < matrix.rows; r++) {\n                for (var c = 0; c < matrix.cols; c++) {\n                    result.entries[r][c] = matrix.entries[r][c] * multiplier.entries[r][c];\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * Apply function to every element\n     *\n     * @param matrix {Matrix}\n     * @param fun {CallableFunction}\n     * @returns Matrix\n     */\n    Matrix.map = function (matrix, fun) {\n        var newMatrix = new Matrix(matrix.getRows(), matrix.getCols());\n        var matrixCopy = matrix.copy();\n        for (var r = 0; r < matrix.getRows(); r++) {\n            for (var c = 0; c < matrix.getCols(); c++) {\n                matrixCopy[r][c] = fun(matrixCopy[r][c]);\n            }\n        }\n        newMatrix.make(matrixCopy);\n        return newMatrix;\n    };\n    Matrix.prototype.copy = function () {\n        return JSON.parse(JSON.stringify(this.entries));\n    };\n    /**\n     * Initialise empty matrix with the given dimensions\n     *\n     * @return void\n     */\n    Matrix.prototype.setup = function () {\n        this.entries = [];\n        for (var r = 0; r < this.rows; r++) {\n            var row = [];\n            for (var c = 0; c < this.cols; c++) {\n                row.push(0);\n            }\n            this.entries.push(row);\n        }\n    };\n    /**\n     * Random numbers between -1:1\n     *\n     * @return {number}\n     */\n    Matrix.prototype.rand = function () {\n        return Math.random() * 2 - 1;\n    };\n    Matrix.prototype.show = function () {\n        console.table(this.entries);\n    };\n    Matrix.prototype.addRow = function (row) {\n        this.rows += 1;\n        this.entries.push(row);\n    };\n    return Matrix;\n}());\nexports.Matrix = Matrix;\n\n\n//# sourceURL=webpack:///./src/Matrix.ts?");

/***/ }),

/***/ "./src/NeuralNetV2.ts":
/*!****************************!*\
  !*** ./src/NeuralNetV2.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ \"./src/Matrix.ts\");\nvar NeuralNetV2 = /** @class */ (function () {\n    function NeuralNetV2(input_nodes, out_nodes, epocs, learning_rate) {\n        if (epocs === void 0) { epocs = 100; }\n        if (learning_rate === void 0) { learning_rate = 0.1; }\n        this.layers = [];\n        this.memory = [];\n        this.input_nodes = input_nodes;\n        this.out_nodes = out_nodes;\n        this.epocs = epocs;\n        this.learning_rate = learning_rate;\n        // this.bootstrap();\n    }\n    NeuralNetV2.prototype.addHiddenLayer = function (nodes) {\n        var layer;\n        var layers_count = this.layers.length;\n        if (layers_count > 0) {\n            layer = new Matrix_1.Matrix(nodes, this.layers[layers_count - 1].getRows() + 1);\n        }\n        else {\n            layer = new Matrix_1.Matrix(nodes, this.input_nodes + 1);\n        }\n        this.layers.push(layer);\n    };\n    NeuralNetV2.prototype.create = function () {\n        this.addHiddenLayer(this.out_nodes);\n        this.bootstrap();\n    };\n    NeuralNetV2.prototype.bootstrap = function () {\n        this.layers.forEach(function (layer) {\n            layer.randomize();\n        });\n    };\n    NeuralNetV2.prototype.feedForwad = function (input_arr, preprocess) {\n        var _this = this;\n        if (preprocess === void 0) { preprocess = true; }\n        var result;\n        var input_matrix = new Matrix_1.Matrix(input_arr.length + 1, input_arr[0].length);\n        this.memory = [];\n        if (preprocess) {\n            input_arr.push([1]);\n        }\n        input_matrix.make(input_arr);\n        result = new Matrix_1.Matrix(input_matrix.getRows(), input_matrix.getCols());\n        result.make(input_matrix.copy());\n        this.layers.forEach(function (layer, index) {\n            /** Compute every layer */\n            result = Matrix_1.Matrix.multy(layer, result);\n            result = Matrix_1.Matrix.map(result, _this.sigmoid);\n            /** Memorise current layer output */\n            var memoryResult = new Matrix_1.Matrix(result.getRows(), result.getCols());\n            memoryResult.make(result.copy());\n            _this.memory.push(memoryResult);\n            /** Add a single column for bias computation if its not the last layer */\n            if (index != _this.layers.length - 1) {\n                result.addRow([1]);\n            }\n        });\n        return [result, input_matrix];\n    };\n    NeuralNetV2.prototype.training = function (inputs_arr, answers) {\n        var _this = this;\n        for (var batch = 0; batch < this.epocs; batch++) {\n            inputs_arr.forEach(function (element, i) {\n                var processed_arr = [];\n                var processed_answ = [];\n                var ans = new Matrix_1.Matrix(answers[i].length, 1);\n                element.map(function (x) { return processed_arr.push([x]); });\n                answers[i].map(function (x) { return processed_answ.push([x]); });\n                ans.make(processed_answ);\n                var _a = _this.feedForwad(processed_arr), res = _a[0], input_matrix = _a[1];\n                /*****************************************************/\n                var error = Matrix_1.Matrix.subtract(res, ans);\n                for (var l = _this.layers.length - 1; 0 <= l; l--) {\n                    if (l != _this.layers.length - 1) {\n                        var prev_l_t = Matrix_1.Matrix.transpose(_this.layers[l + 1]);\n                        error = Matrix_1.Matrix.multy(prev_l_t, error);\n                    }\n                    var gradient = Matrix_1.Matrix.map(_this.memory[l], function (x) { return x * (1 - x); });\n                    gradient = Matrix_1.Matrix.multyElWise(gradient, error);\n                    gradient = Matrix_1.Matrix.multy(gradient, _this.learning_rate);\n                    if (_this.layers.length > 1 && l != 0) {\n                        gradient = Matrix_1.Matrix.multy(gradient, Matrix_1.Matrix.transpose(_this.memory[l - 1]));\n                    }\n                    else {\n                        gradient = Matrix_1.Matrix.multy(gradient, Matrix_1.Matrix.transpose(input_matrix));\n                    }\n                    _this.layers[l] = Matrix_1.Matrix.subtract(_this.layers[l], gradient);\n                }\n            });\n        }\n    };\n    NeuralNetV2.prototype.tester = function (inputs_arr, answers) {\n        var _this = this;\n        var truesCount = inputs_arr.length, outputsCount = 0;\n        inputs_arr.forEach(function (element, i) {\n            var processed_arr = [];\n            var processed_answ = [];\n            var ans = new Matrix_1.Matrix(answers[i].length, 1);\n            element.map(function (x) { return processed_arr.push([x]); });\n            answers[i].map(function (x) { return processed_answ.push([x]); });\n            ans.make(processed_answ);\n            var _a = _this.feedForwad(processed_arr), res = _a[0], input_matrix = _a[1];\n            var a = (res.toArray()[0][0] > .50) ? 1 : 0;\n            if (a == ans.toArray()[0][0]) {\n                outputsCount++;\n            }\n            console.log(res.toArray()[0][0], '=-=', ans.toArray()[0][0], \" : \", processed_arr);\n        });\n        return outputsCount / truesCount;\n    };\n    NeuralNetV2.prototype.save = function () {\n        console.log(JSON.stringify(this.layers));\n    };\n    NeuralNetV2.prototype.load = function (neuralString) {\n        var _this = this;\n        var loadedLayers = JSON.parse(neuralString);\n        loadedLayers.forEach(function (element) {\n            var layer;\n            // const layers_count = this.layers.length;\n            layer = new Matrix_1.Matrix(element.rows, element.cols);\n            layer.make(element.entries);\n            _this.layers.push(layer);\n        });\n    };\n    ;\n    /**\n     * Activation function\n     *\n     * @param x {number}\n     * @returns {number}\n     */\n    NeuralNetV2.prototype.sigmoid = function (x) {\n        return 1 / (1 + Math.exp(-x));\n    };\n    return NeuralNetV2;\n}());\nexports.NeuralNetV2 = NeuralNetV2;\n\n\n//# sourceURL=webpack:///./src/NeuralNetV2.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ \"./src/Matrix.ts\");\nvar NeuralNetV2_1 = __webpack_require__(/*! ./NeuralNetV2 */ \"./src/NeuralNetV2.ts\");\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    /** Preprocessing for Color classification problem*/\n    var m = new Matrix_1.Matrix(3, 2);\n    var n = new Matrix_1.Matrix(3, 2);\n    var arr = a.split('\\n');\n    var trSet = [];\n    arr.forEach(function (element) {\n        if (element.length) {\n            trSet.push(element.split(\",\").map(function (x) { return parseInt(x.trim()); }));\n        }\n    });\n    var lblSet = [];\n    trSet.forEach(function (el) {\n        lblSet.push([parseInt(el.pop())]);\n    });\n    trSet.forEach(function (element, i) {\n        var minP = 0;\n        var maxP = 255;\n        trSet[i] = element.map(function (e) {\n            return (e - minP) / (maxP - minP);\n        });\n    });\n    var arr2 = tr.split('\\n');\n    var testSet = [];\n    arr2.forEach(function (element) {\n        if (element.length) {\n            testSet.push(element.split(\",\").map(function (x) { return parseInt(x.trim()); }));\n        }\n    });\n    var testLblSet = [];\n    testSet.forEach(function (el) {\n        testLblSet.push([parseInt(el.pop())]);\n    });\n    testSet.forEach(function (element, i) {\n        var minP = 0;\n        var maxP = 255;\n        testSet[i] = element.map(function (e) {\n            return (e - minP) / (maxP - minP);\n        });\n    });\n    /** Preprocessing for Color classification problem*/\n    /** Training */\n    var and_gate = new NeuralNetV2_1.NeuralNetV2(2, 2, 10000);\n    // c.feedForwad(v)[0].show();\n    var r = [\n        [1, 0],\n        [0, 0],\n        [1, 1],\n        [0, 1]\n    ];\n    // 0 - False  1 - TRUE\n    var d = [\n        [0, 1],\n        [1, 0],\n        [1, 0],\n        [0, 1]\n    ];\n    // and_gate.addHiddenLayer(3);\n    and_gate.addHiddenLayer(3);\n    and_gate.create();\n    and_gate.training(r, d);\n    console.log(\"FALSE\", and_gate.feedForwad([[1], [1]])[0].toArray());\n    console.log(\"FALSE\", and_gate.feedForwad([[0], [0]])[0].toArray());\n    console.log(\"TRUE\", and_gate.feedForwad([[1], [0]])[0].toArray());\n    console.log(\"TRUE\", and_gate.feedForwad([[0], [1]])[0].toArray());\n    // let color_predictor = new NeuralNetV2(3, 1, 150,0.1)\n    // color_predictor.load('[{\"rows\":5,\"cols\":4,\"entries\":[[17.76738657339137,16.68376243406083,12.180864605578833,-23.875533995227595],[-1.7080562677296234,7.061104601947024,-24.50126490340943,-2.0023392027795515],[3.285032357411038,-10.731045661181906,2.105280348087547,4.333792991993946],[5.777772311092304,-7.044515122454044,1.5022140442290468,2.2017201919615763],[8.175106622168546,-13.522129501417844,6.616822006462266,3.165785040462681]]},{\"rows\":1,\"cols\":6,\"entries\":[[-10.506699519021508,12.05940161410825,0.7336025047554339,1.0888974147997614,1.6467575859658314,-0.3757861874832358]]}]');\n    // p.create();\n    // p.training(trSet, lblSet);\n    // let accuracy = p.tester(testSet, testLblSet);\n    // console.log(accuracy)\n    // Define network;\n    var ColorClassifier = new NeuralNetV2_1.NeuralNetV2(3, 2, 10000, .01);\n    ColorClassifier.addHiddenLayer(64);\n    ColorClassifier.training(trSet, lblSet);\n    var btn = document.querySelector(\".predict\");\n    btn.addEventListener('click', function () {\n        var inputs = document.querySelector('.inputs').value;\n        var res = document.querySelector('.result');\n        console.log(inputs);\n        res.style.background = \"rgb(\" + inputs + \")\";\n        inputs = inputs.split(',').map(function (x) { return x.trim(); });\n        inputs.forEach(function (e, i) {\n            inputs[i] = [e / 255];\n            // return e;\n        });\n        var result = ColorClassifier.feedForwad(inputs)[0].toArray()[0][0];\n        console.log(result);\n        if (result > 0.50) {\n            res.style.color = 'white';\n        }\n        else {\n            res.style.color = \"black\";\n        }\n        ;\n    });\n});\nvar a = \"\\n83, 117,  173, 1\\n127, 173,  91, 0\\n100, 112,  90, 1\\n171, 188,  158, 0\\n121, 175,  79, 0\\n82, 175,  10, 1\\n141, 153,  133, 0\\n34, 27,  79, 1\\n60, 37,  209, 1\\n150, 77,  67, 1\\n91, 26,  18, 1\\n3, 8,  5, 1\\n112, 209,  151, 0\\n12, 114,  53, 0\\n213, 125,  36, 0\\n140, 82,  25, 1\\n113, 146,  233, 0\\n185, 166,  203, 0\\n72, 40,  94, 1\\n138, 94,  219, 0\\n116, 152,  65, 1\\n249, 254,  141, 0\\n160, 66,  240, 0\\n69, 193,  123, 0\\n202, 156,  192, 0\\n235, 152,  255, 0\\n236, 223,  121, 0\\n206, 100,  150, 0\\n243, 218,  101, 0\\n89, 193,  226, 0\\n104, 207,  224, 0\\n108, 106,  172, 1\\n158, 216,  75, 0\\n162, 100,  232, 0\\n142, 154,  238, 0\\n168, 23,  163, 1\\n16, 196,  63, 0\\n154, 197,  112, 0\\n19, 199,  180, 0\\n137, 36,  196, 1\\n20, 112,  171, 1\\n21, 49,  138, 1\\n49, 175,  21, 1\\n167, 30,  90, 1\\n33, 143,  240, 0\\n150, 169,  116, 0\\n49, 251,  96, 0\\n115, 187,  144, 0\\n213, 80,  250, 0\\n211, 8,  155, 1\\n185, 88,  25, 1\\n80, 108,  7, 1\\n148, 96,  1, 1\\n97, 65,  255, 0\\n98, 215,  77, 0\\n249, 49,  248, 0\\n141, 16,  186, 1\\n230, 192,  146, 0\\n45, 65,  120, 1\\n117, 154,  194, 0\\n56, 192,  232, 0\\n97, 94,  48, 1\\n110, 2,  154, 1\\n16, 199,  228, 0\\n133, 108,  62, 1\\n198, 77,  224, 0\\n82, 178,  25, 1\\n255, 150,  151, 0\\n169, 133,  118, 0\\n230, 92,  76, 0\\n215, 46,  196, 0\\n70, 208,  13, 1\\n176, 149,  77, 0\\n240, 44,  124, 0\\n132, 252,  205, 0\\n194, 164,  75, 0\\n19, 101,  212, 1\\n185, 129,  61, 0\\n62, 167,  166, 0\\n111, 160,  108, 0\\n86, 104,  106, 1\\n114, 121,  93, 1\\n9, 135,  140, 1\\n234, 221,  25, 0\\n23, 87,  64, 1\\n190, 169,  152, 0\\n126, 54,  113, 1\\n227, 187,  188, 0\\n234, 211,  163, 0\\n61, 17,  198, 1\\n57, 41,  44, 1\\n164, 86,  67, 1\\n60, 167,  27, 1\\n210, 36,  69, 1\\n145, 82,  10, 1\\n218, 177,  236, 0\\n192, 94,  202, 0\\n120, 101,  62, 1\\n139, 24,  117, 1\\n215, 72,  11, 1\\n242, 146,  133, 0\\n143, 25,  129, 1\\n92, 101,  235, 0\\n75, 86,  208, 1\\n32, 220,  10, 1\\n214, 219,  114, 0\\n141, 16,  71, 1\\n20, 242,  181, 0\\n189, 235,  146, 0\\n96, 248,  105, 0\\n143, 2,  254, 1\\n59, 16,  68, 1\\n174, 178,  159, 0\\n91, 180,  199, 0\\n159, 84,  76, 1\\n245, 166,  14, 0\\n113, 176,  253, 0\\n55, 37,  250, 1\\n226, 245,  178, 0\\n217, 144,  47, 0\\n72, 115,  214, 0\\n46, 6,  248, 1\\n27, 131,  208, 1\\n13, 16,  20, 1\\n72, 194,  106, 0\\n160, 113,  171, 0\\n96, 208,  33, 1\\n239, 179,  192, 0\\n3, 114,  32, 1\\n181, 119,  190, 0\\n96, 214,  12, 1\\n240, 40,  226, 0\\n82, 107,  29, 1\\n9, 87,  18, 1\\n29, 243,  209, 0\\n61, 248,  81, 0\\n214, 81,  106, 0\\n180, 124,  208, 0\\n200, 131,  50, 0\\n48, 157,  20, 1\\n7, 164,  202, 0\\n197, 31,  74, 1\\n53, 13,  225, 1\\n246, 171,  34, 0\\n135, 245,  178, 0\\n42, 161,  201, 1\\n84, 31,  186, 1\\n213, 209,  176, 0\\n58, 30,  230, 1\\n27, 105,  33, 1\\n77, 154,  187, 0\\n238, 250,  224, 0\\n93, 136,  113, 1\\n159, 140,  234, 0\\n125, 5,  21, 1\\n49, 177,  78, 0\\n85, 177,  141, 0\\n150, 61,  217, 0\\n222, 161,  25, 0\\n91, 102,  93, 1\\n186, 104,  87, 0\\n235, 69,  114, 0\\n242, 118,  24, 0\\n169, 59,  197, 0\\n238, 185,  211, 0\\n128, 246,  20, 1\\n241, 181,  48, 0\\n198, 202,  116, 0\";\nvar tr = \"41, 49,  79, 1\\n128, 113,  85, 1\\n160, 20,  104, 1\\n95, 45,  113, 1\\n15, 251,  138, 0\\n203, 215,  70, 0\\n254, 186,  206, 0\\n230, 80,  42, 0\\n149, 195,  155, 0\\n173, 93,  250, 0\\n175, 162,  139, 0\\n13, 96,  223, 1\\n148, 219,  72, 0\\n11, 167,  119, 0\\n138, 4,  186, 1\\n78, 15,  26, 1\\n163, 132,  166, 0\\n101, 48,  72, 1\\n200, 57,  101, 1\\n148, 40,  49, 1\\n47, 145,  168, 1\\n57, 70,  33, 1\\n88, 146,  23, 1\\n216, 98,  83, 0\\n152, 145,  212, 0\";\n\"69, 37,  6, 1\\n219,197,108,1\\n124,28,189,0\\n189,30,118,0\\n106,140,171,1\\n50,237,41,1\\n118,116,44,0\\n219,81,52,1\\n6,115,231,0\\n46,11,236,0\\n27,108,115,0\\n180,84,203,1\\n197,249,204,1\\n218,2,236,1\\n233,10,89,1\\n204,65,47,1\\n222,64,36,1\\n140,242,150,1\\n67,157,190,0\\n97,183,110,1\\n142,130,223,1\\n0,57,109,0\\n170,60,24,1\\n215,17,82,1\\n187,208,54,1\\n195,211,184,1\\n119,10,204,0\\n91,118,123,0\\n231,48,211,1\\n148,140,211,1\\n194,25,221,1\\n159,41,175,0\\n8,66,93,0\\n23,120,88,0\\n128,52,102,0\\n28,198,152,1\\n18,248,235,1\\n35,112,98,0\\n206,129,91,1\\n40,97,162,0\\n149,26,215,0\\n184,150,66,1\\n104,245,100,1\\n12,184,154,1\\n158,97,85,1\\n44,16,178,0\\n105,91,10,0\\n151,231,77,1\\n14,27,35,0\\n45,15,67,0\\n9,79,182,0\\n177,53,3,1\\n35,168,58,1\\n2,147,167,0\\n59,211,163,1\\n241,243,67,1\\n2,93,24,0\\n255,7,70,1\\n133,197,24,1\\n112,114,10,0\\n115,179,0,1\\n8,104,7,0\\n242,212,199,1\\n91,73,137,0\\n32,216,92,1\\n157,197,9,1\\n65,16,98,0\\n198,187,214,1\\n147,106,25,0\\n75,6,137,0\\n198,80,216,1\\n5,231,233,1\\n187,223,229,1\\n138,250,190,1\\n176,141,72,1\\n206,154,97,1\\n144,150,4,1\\n173,4,60,1\\n203,243,172,1\\n196,142,10,1\\n133,120,92,0\\n248,116,52,1\\n212,171,77,1\\n117,179,241,1\\n45,127,184,0\\n128,4,198,0\\n216,126,218,1\\n63,38,59,0\\n21,137,93,0\\n185,90,175,1\\n138,143,190,1\\n123,235,1,1\\n8,84,130,0\\n35,216,190,1\\n17,148,95,0\\n35,210,129,1\\n9,168,174,0\\n85,155,183,0\\n150,196,87,1\\n129,108,5,0\\n115,53,188,0\\n75,223,90,1\\n163,214,210,1\\n110,170,84,0\\n123,73,197,0\\n74,68,134,0\\n156,32,245,1\\n231,110,148,1\\n8,237,115,1\\n142,40,41,0\\n198,75,83,1\\n243,117,10,1\\n41,230,121,1\\n101,210,23,1\\n214,174,209,1\\n200,43,215,0\\n56,83,182,0\\n226,166,213,1\\n68,97,139,0\\n63,52,145,0\\n193,200,100,1\\n70,108,151,0\\n63,201,86,1\\n187,145,25,1\\n165,84,255,0\\n250,196,209,1\\n27,230,131,1\\n59,226,106,1\\n115,34,74,0\\n135,169,165,1\\n66,69,230,0\\n98,244,141,1\\n124,170,174,1\\n0,26,162,0\\n193,204,25,1\\n49,18,59,0\\n190,242,57,1\\n102,244,253,1\\n59,235,198,1\\n91,78,132,0\\n234,222,136,1\\n119,69,59,0\\n71,2,128,0\\n23,61,12,0\\n102,230,214,1\\n189,99,50,1\\n180,130,196,1\\n48,59,172,0\\n165,212,5,1\\n150,138,153,1\\n61,87,127,0\\n54,179,197,0\\n45,195,139,1\\n41,86,48,0\\n166,70,16,0\\n197,158,58,1\\n150,171,119,1\\n17,33,211,0\\n223,135,54,1\\n41,22,189,0\\n200,242,120,1\\n91,72,114,0\\n96,221,141,1\\n248,225,99,1\\n130,22,93,0\\n224,213,1,1\\n174,0,193,0\\n16,184,154,1\\n242,42,177,1\\n73,16,156,0\\n155,143,176,1\\n185,12,246,1\\n205,199,24,1\\n112,230,137,1\\n181,98,182,1\\n83,80,140,0\\n106,39,31,0\\n119,164,68,1\\n80,116,14,0\\n100,101,128,0\\n58,7,93,0\\n50,187,16,1\\n83,102,215,0\\n49,102,61,0\\n183,5,199,1\\n140,79,58,0\\n15,88,59,0\\n103,222,90,1\\n183,182,89,1\\n85,163,115,0\\n170,97,176,1\\n118,18,165,0\\n189,146,154,1\\n51,16,115,0\\n208,41,43,1\\n95,66,236,0\\n239,212,50,1\\n151,93,225,0\\n154,173,115,1\\n244,17,73,1\\n80,200,204,1\\n23,225,211,1\\n170,12,115,0\\n185,64,120,0\\n101,90,63,0\\n33,216,130,1\\n37,111,247,0\\n158,149,218,1\\n211,206,188,1\\n139,136,205,1\\n132,196,10,1\\n241,141,24,1\\n201,172,193,1\\n90,176,245,1\\n135,183,185,1\\n41,112,88,0\\n108,85,115,0\\n27,165,169,1\\n50,16,190,0\\n28,23,88,0\\n37,91,20,0\\n159,100,39,0\\n231,160,114,1\\n126,82,165,0\\n204,231,116,1\\n253,23,140,0\\n37,146,172,1\\n40,77,100,0\\n46,237,58,1\\n78,166,128,0\\n153,34,122,0\\n149,164,40,0\\n134,191,127,1\\n234,134,174,1\\n160,227,82,1\\n71,88,164,0\\n15,40,156,0\\n62,235,216,1\\n254,83,31,0\\n204,107,124,0\\n193,66,14,0\\n3,12,209,0\\n56,6,168,0\\n248,198,222,1\\n135,20,234,0\\n238,79,149,0\\n81,82,92,0\\n125,213,16,1\\n34,233,173,1\\n48,49,71,0\\n35,32,179,0\\n147,55,5,0\\n160,3,6,0\\n203,111,224,1\\n111,221,233,1\\n248,12,92,1\\n150,33,220,0\\n133,217,248,1\\n226,38,160,0\\n37,88,147,0\\n33,180,226,1\\n22,180,159,1\\n230,58,89,0\\n1,236,221,1\\n21,132,122,0\\n15,165,23,0\\n23,28,153,0\\n232,233,107,1\\n27,162,89,0\\n10,169,180,0\\n167,193,56,1\\n173,91,77,0\\n33,229,6,1\\n23,168,156,0\\n103,4,170,0\\n93,114,95,0\\n123,241,107,1\\n82,21,143,0\\n10,112,56,0\\n245,226,210,1\\n179,153,43,0\\n50,27,2,0\\n213,113,100,0\\n125,175,75,0\\n213,56,158,0\\n103,67,159,0\\n33,185,191,1\\n104,107,113,0\\n17,17,182,0\\n58,50,226,0\\n52,16,231,0\\n117,223,32,1\\n139,94,183,0\\n173,235,181,1\\n143,21,38,0\\n71,7,42,0\\n90,174,128,1\\n63,237,138,1\\n184,99,63,0\\n142,251,240,1\\n136,183,146,1\\n139,162,72,1\\n23,43,75,0\\n71,249,160,1\\n44,49,42,0\\n10,246,139,1\\n39,89,179,0\\n153,205,113,1\\n0,98,136,0\\n242,226,75,1\\n246,180,100,1\\n241,26,150,0\\n241,39,6,0\\n204,113,204,0\\n151,201,209,1\\n246,111,201,1\\n153,80,187,0\\n194,158,68,0\\n24,106,112,0\\n108,204,206,1\\n82,38,57,0\\n210,24,226,0\\n7,170,88,1\\n178,98,142,0\\n195,214,182,1\\n219,104,198,0\\n42,16,46,0\\n137,136,34,0\\n141,212,181,1\\n34,159,94,0\\n228,47,128,0\\n112,104,184,0\\n56,193,88,1\\n241,161,154,1\\n156,153,237,0\\n62,182,74,0\\n84,152,58,0\\n182,38,155,0\\n55,247,125,1\\n247,136,36,1\\n164,80,148,0\\n235,110,58,1\\n201,94,173,0\\n175,148,131,0\\n144,0,127,0\\n3,36,194,0\\n51,46,251,0\\n163,118,111,0\\n28,157,57,0\\n207,21,27,0\\n235,93,245,0\\n66,112,65,0\\n135,143,220,0\\n49,93,251,0\\n3,44,97,0\\n57,101,213,0\\n231,45,143,0\\n176,67,178,0\\n190,13,165,0\\n226,136,197,1\\n221,55,218,0\\n249,197,146,1\\n18,108,22,0\\n0,135,207,0\\n39,59,111,0\\n124,74,9,0\\n210,173,210,1\\n99,150,190,1\\n89,148,186,1\\n91,203,108,1\\n83,222,202,1\\n72,119,187,0\\n90,153,62,0\\n198,162,232,1\\n92,146,249,1\\n96,44,211,0\\n35,249,140,1\\n16,118,51,0\\n119,89,124,0\\n207,227,199,1\\n198,167,159,1\\n192,227,150,1\\n47,33,30,0\\n254,242,203,1\\n168,157,41,1\\n122,162,83,1\\n84,186,1,1\\n162,120,239,0\\n161,73,171,0\\n180,31,134,0\\n66,145,50,0\\n4,63,165,0\\n225,7,234,0\\n66,56,156,0\\n41,15,194,0\\n238,190,72,1\\n85,99,202,0\\n244,191,188,1\\n102,7,213,0\\n219,43,129,0\\n130,150,161,0\\n41,190,29,1\\n18,137,210,0\\n184,161,32,0\\n157,38,231,0\\n123,174,50,1\\n140,141,219,0\\n37,244,183,1\\n241,25,58,0\\n165,122,88,0\\n144,171,64,0\\n129,162,88,0\\n157,174,122,1\\n213,246,153,1\\n8,199,147,1\\n158,198,69,1\\n248,251,239,1\\n24,115,116,0\\n15,132,245,0\\n148,30,2,0\\n190,108,6,0\\n100,25,41,0\\n187,11,224,0\\n20,79,243,0\\n28,14,137,0\\n254,19,61,0\\n117,98,132,0\\n92,234,94,1\\n24,198,47,1\\n137,107,243,0\\n189,70,103,0\\n154,114,253,0\\n72,171,3,1\\n157,53,13,0\\n31,29,28,0\\n12,96,211,0\\n224,242,84,1\\n207,33,42,0\\n71,147,116,0\\n101,92,29,0\\n216,188,152,1\\n190,191,243,1\\n225,47,220,0\\n88,123,196,0\\n232,29,88,0\\n60,26,245,0\\n178,247,200,1\\n137,134,246,0\\n205,204,57,1\\n71,40,154,0\\n98,122,169,0\\n190,30,42,0\\n93,40,0,0\\n84,107,237,0\\n234,183,97,1\\n137,16,107,0\\n242,228,196,1\\n140,86,0,0\\n77,255,61,1\\n143,153,45,0\\n145,214,2,1\\n68,45,129,0\\n22,15,174,0\\n2,213,29,1\\n24,175,1,1\\n11,80,54,0\\n91,132,141,0\\n120,57,36,0\\n167,207,217,1\\n87,172,211,1\\n97,162,86,1\\n111,222,29,1\\n218,42,222,0\\n176,165,205,1\\n98,226,94,1\\n105,216,112,1\\n250,36,190,0\\n84,161,36,0\\n38,58,49,0\\n228,29,253,0\\n37,140,57,0\\n18,182,72,1\\n36,172,166,1\\n197,54,189,0\\n122,220,33,1\\n33,3,58,0\\n74,46,125,0\\n218,42,166,0\\n154,156,112,1\\n64,139,106,0\\n18,76,35,0\\n216,41,87,0\\n124,68,187,0\\n172,30,69,0\\n11,173,215,1\\n49,134,91,0\\n3,182,113,1\\n233,62,101,0\\n215,23,22,0\\n158,35,22,0\\n37,67,8,0\\n96,101,12,0\\n142,189,25,1\\n38,179,22,1\\n42,243,170,1\\n8,73,243,0\\n214,77,10,0\\n175,125,206,1\\n160,74,181,0\\n59,217,167,1\\n171,110,238,0\\n251,64,59,0\\n77,23,215,0\\n74,124,87,0\\n49,48,107,0\\n209,93,159,1\\n187,11,14,0\\n103,211,192,1\\n154,25,11,0\\n127,244,99,1\\n131,36,47,0\\n54,241,127,1\\n33,200,43,1\\n131,155,59,1\\n34,119,165,0\\n158,135,21,0\\n199,23,116,0\\n54,27,113,0\\n170,233,152,1\\n143,225,143,1\\n90,141,117,0\\n18,66,160,0\\n15,247,238,1\\n61,87,66,0\\n21,23,162,0\\n186,231,199,1\\n228,252,242,1\\n229,160,214,1\\n244,236,216,1\\n226,142,51,0\\n185,43,38,0\\n5,254,70,1\\n184,239,180,1\\n252,221,152,1\\n61,70,86,0\\n77,110,166,0\\n190,231,56,1\\n170,153,70,0\\n102,248,156,1\\n232,202,43,1\\n169,241,242,1\\n152,44,223,0\\n68,17,89,0\\n94,170,112,0\\n157,248,2,1\\n214,125,128,1\\n16,194,250,1\\n221,252,140,1\\n221,92,115,0\\n113,98,223,0\\n124,131,117,0\\n69,213,1,1\\n18,132,44,0\\n242,114,138,1\\n127,192,19,1\\n153,32,253,0\\n228,134,75,1\\n143,68,179,0\\n204,174,204,1\\n34,100,163,0\\n134,209,203,1\\n153,88,43,0\\n135,224,148,1\\n137,80,206,0\\n93,92,65,0\\n20,121,208,0\\n69,203,8,1\\n72,48,161,0\\n97,177,16,0\\n200,219,170,1\\n212,98,25,0\\n141,120,169,0\\n252,190,113,1\\n50,116,171,0\\n213,142,85,1\\n144,225,229,1\\n220,114,8,0\\n51,2,149,0\\n132,18,83,0\\n228,159,97,1\\n198,215,198,1\\n1,201,148,1\\n94,155,105,0\\n48,67,20,0\\n208,31,26,0\\n206,12,97,0\\n16,198,131,1\\n239,174,171,1\\n232,28,74,0\\n139,92,135,0\\n179,59,158,0\\n175,139,141,0\\n126,159,6,0\\n17,186,173,1\\n92,16,182,0\\n254,103,246,1\\n177,3,179,0\\n253,147,230,1\\n155,206,235,1\\n24,164,193,1\\n225,243,134,1\\n100,44,61,0\\n173,55,83,0\\n110,98,151,0\\n231,45,146,0\\n231,14,76,0\\n56,209,71,1\\n199,98,14,0\\n187,217,9,1\\n223,42,20,0\\n111,109,189,0\\n54,220,25,1\\n49,62,208,0\\n173,137,101,0\\n57,226,119,1\\n95,13,165,0\\n67,220,81,1\\n12,112,119,0\\n141,201,207,1\\n60,251,215,1\\n161,164,238,1\\n107,139,25,0\\n167,143,190,0\\n10,161,96,0\\n217,214,17,1\\n39,150,238,1\\n40,169,134,1\\n140,67,216,0\\n68,32,236,0\\n132,228,183,1\\n141,76,158,0\\n168,63,138,0\\n37,104,152,0\\n205,52,124,0\\n41,215,86,1\\n221,12,174,0\\n120,44,81,0\\n94,152,114,0\\n218,33,166,0\\n169,173,167,1\\n96,105,22,0\\n18,201,107,1\\n30,217,18,1\\n240,181,122,1\\n232,85,71,1\\n246,82,32,1\\n185,22,199,0\\n90,201,129,1\\n247,22,219,0\\n236,208,59,1\\n225,185,86,1\\n212,75,124,0\\n135,187,135,1\\n127,184,146,1\\n61,230,106,1\\n60,48,241,0\\n189,155,57,1\\n243,39,10,0\\n51,229,175,1\\n15,96,185,0\\n4,57,169,0\\n109,175,112,1\\n189,221,0,1\\n159,66,122,0\\n116,36,79,0\\n72,18,114,0\\n164,50,181,0\\n82,195,149,1\\n202,211,171,1\\n48,227,205,1\\n23,19,37,0\\n196,221,53,1\\n176,176,7,1\\n232,138,29,1\\n104,122,215,0\\n78,10,68,0\\n101,230,98,1\\n148,211,21,1\\n54,239,159,1\\n110,181,195,1\\n133,55,176,0\\n223,65,103,0\\n189,217,96,1\\n117,79,172,0\\n78,13,140,0\\n183,182,177,1\\n159,72,22,0\\n53,103,155,0\\n251,253,248,1\\n24,117,165,0\\n150,14,83,0\\n250,134,161,1\\n5,18,249,0\\n47,172,61,1\\n245,141,177,1\\n85,113,48,0\\n104,43,46,0\\n102,234,19,1\\n217,221,199,1\\n167,125,221,0\\n68,180,182,1\\n115,114,199,0\\n170,126,72,0\\n126,223,252,1\\n121,154,180,1\\n90,249,246,1\\n214,105,106,0\\n125,91,51,0\\n165,138,235,1\\n155,142,186,1\\n228,202,198,1\\n62,183,156,1\\n94,26,121,0\\n61,241,36,1\\n67,96,252,0\\n172,7,43,0\\n25,123,201,0\\n82,9,227,0\\n52,131,157,0\\n121,115,150,0\\n243,167,123,1\\n91,87,65,0\\n115,16,254,0\\n110,20,52,0\\n129,251,224,1\\n211,71,178,0\\n140,29,23,0\\n100,198,189,1\\n131,73,216,0\\n41,70,3,0\\n213,167,148,1\\n94,253,16,1\\n200,106,177,0\\n38,198,30,1\\n67,19,202,0\\n236,220,97,1\\n137,43,73,0\\n158,202,77,1\\n72,170,7,1\\n199,15,46,0\\n50,240,66,1\\n105,132,107,0\\n169,252,153,1\\n165,105,29,0\\n123,231,229,1\\n172,124,73,0\\n136,250,3,1\\n120,198,67,1\\n197,63,58,0\\n6,46,199,0\\n36,100,197,0\\n124,100,219,0\\n3,62,80,0\\n41,4,50,0\\n120,242,11,1\\n1,27,3,0\\n45,46,143,0\\n216,57,77,0\\n27,85,63,0\\n99,168,85,1\\n38,227,122,1\\n142,28,255,0\\n184,118,107,1\\n64,103,7,0\\n111,140,167,1\\n87,245,251,1\\n175,185,57,1\\n52,125,223,0\\n44,202,250,1\\n102,60,64,0\\n22,146,151,0\\n139,76,196,0\\n35,53,74,0\\n179,119,171,1\\n123,209,51,1\\n200,43,216,0\\n156,98,199,0\\n33,127,240,1\\n138,176,20,1\\n181,60,226,0\\n163,60,75,0\\n226,208,147,1\\n255,78,121,1\\n212,245,110,1\\n199,211,74,1\\n158,80,32,0\\n141,237,96,1\\n7,72,234,0\\n235,33,14,0\\n178,250,80,1\\n59,31,232,0\\n67,111,53,0\\n173,38,174,0\\n153,59,40,0\\n246,224,104,1\\n145,148,11,0\\n91,223,17,1\\n198,103,15,0\\n63,140,71,0\\n195,53,174,0\\n122,156,189,1\\n226,182,123,1\\n134,179,35,1\\n147,127,75,1\\n6,161,17,1\\n96,167,231,1\\n114,126,220,1\\n40,176,218,1\\n58,107,92,0\\n192,70,158,0\\n134,138,239,1\\n13,178,72,1\\n29,8,137,0\\n154,208,132,1\\n91,88,27,0\\n7,104,206,0\\n69,132,173,0\\n190,188,99,1\\n201,106,101,1\\n6,67,205,0\\n148,45,96,0\\n145,189,64,1\\n199,75,154,0\\n203,140,239,1\\n19,202,134,1\\n40,126,117,0\\n215,125,118,1\\n3,172,130,1\\n212,187,70,1\\n98,51,30,0\\n60,153,132,1\\n37,115,91,0\\n78,97,115,0\\n230,182,225,1\\n58,177,25,1\\n246,30,205,0\\n34,169,93,1\\n174,148,250,1\\n20,227,83,1\\n78,201,16,1\\n193,42,150,0\\n28,143,179,0\\n5,196,82,1\\n55,215,202,1\\n21,70,42,0\\n66,195,249,1\\n249,246,81,1\\n136,73,188,0\\n204,111,107,1\\n129,222,221,1\\n216,42,173,0\\n39,48,28,0\\n50,223,168,1\\n212,173,84,1\\n81,34,131,0\\n194,80,251,1\\n228,15,188,0\\n168,238,101,1\\n11,192,220,1\\n148,171,211,1\\n245,89,81,1\\n27,146,164,1\\n65,184,33,1\\n43,90,245,0\\n172,254,237,1\\n18,180,254,1\\n246,233,238,1\\n12,179,128,1\\n183,168,249,1\\n213,105,56,1\\n42,188,237,1\\n22,153,254,1\\n105,238,160,1\\n247,204,11,1\\n24,16,238,0\\n180,231,157,1\\n108,245,155,1\\n103,200,141,1\\n139,139,189,1\\n100,178,198,1\\n44,117,27,0\\n243,128,179,1\\n1,51,50,0\\n209,34,243,0\\n147,77,43,0\\n170,21,47,0\\n238,45,148,0\\n177,166,220,1\\n168,69,22,0\\n52,193,88,1\\n151,74,81,0\\n32,26,99,0\\n226,60,170,0\\n68,119,99,0\\n88,97,196,0\\n33,15,93,0\\n238,86,99,1\\n133,178,117,1\\n249,233,11,1\\n25,147,146,1\\n220,245,143,1\\n29,143,63,1\\n63,187,107,1\\n32,30,57,0\\n22,171,136,1\\n96,212,74,1\\n238,135,221,1\\n239,97,252,1\\n143,233,193,1\\n148,229,91,1\\n49,235,247,1\\n230,230,225,1\\n224,227,46,1\\n170,29,211,0\\n121,84,141,0\\n39,187,96,1\\n109,247,22,1\\n209,147,199,1\\n48,145,232,1\\n179,74,179,0\\n26,24,179,0\\n127,87,1,0\\n39,3,0,0\\n160,15,82,0\\n162,158,221,1\\n237,213,57,1\\n188,68,63,0\\n96,10,60,0\\n39,181,216,1\\n70,226,251,1\\n76,230,222,1\\n175,150,182,1\\n141,48,94,0\\n132,48,231,0\\n138,89,31,0\\n165,117,17,0\\n3,251,244,1\\n128,55,4,0\\n216,52,14,0\\n19,185,26,1\\n211,134,129,1\\n20,106,47,0\\n93,47,181,0\\n31,219,48,1\\n167,252,192,1\\n69,26,223,0\\n181,69,68,0\\n166,68,120,0\\n179,187,91,1\\n165,83,56,0\\n196,104,184,1\\n60,106,193,0\\n86,64,79,0\\n83,103,37,0\\n57,159,89,1\\n112,85,208,0\\n45,2,230,0\\n68,122,157,1\\n30,72,32,0\\n137,239,228,1\\n141,44,244,0\\n43,12,220,0\\n86,164,141,1\\n79,96,80,0\\n225,194,174,1\\n153,143,169,1\\n28,34,245,0\\n187,221,158,1\\n154,13,19,0\\n188,217,117,1\\n96,187,42,1\\n114,0,13,0\\n195,219,3,1\\n55,205,112,1\\n108,174,193,1\\n79,62,191,0\\n159,88,198,0\\n233,35,19,0\\n254,225,221,1\\n88,170,200,1\\n177,87,170,0\\n221,119,114,0\\n21,232,137,1\\n50,5,72,0\\n161,67,76,0\\n10,200,199,1\\n228,69,81,1\\n29,38,215,0\\n219,166,230,1\\n115,67,73,0\\n202,204,29,1\\n236,217,148,1\\n14,208,114,1\\n138,44,100,0\\n12,169,80,1\\n0,204,199,1\\n217,137,201,1\\n97,44,37,0\\n35,229,183,1\\n142,249,17,1\\n239,76,225,0\\n188,190,1,1\\n138,170,111,1\\n3,132,100,1\\n66,104,55,0\\n111,178,22,1\\n98,24,164,0\\n71,194,229,1\\n88,13,39,0\\n72,215,133,1\\n114,192,101,1\\n179,7,2,0\\n241,134,215,1\\n236,108,223,1\\n216,14,86,0\\n137,57,230,0\\n22,242,119,1\\n76,15,147,0\\n181,214,146,1\\n164,199,40,1\\n214,111,243,1\\n48,216,220,1\\n94,20,181,0\\n120,177,115,1\\n253,118,32,1\\n79,14,128,0\\n255,147,171,1\\n22,76,239,0\\n169,157,131,1\\n153,202,79,1\\n84,233,223,1\\n237,8,224,0\\n85,20,247,0\\n46,182,247,1\\n28,68,106,0\\n70,19,77,0\\n31,100,238,0\\n89,181,52,1\\n60,137,204,1\\n144,161,132,1\\n59,144,50,1\\n181,182,95,1\\n195,95,89,1\\n194,138,224,1\\n11,196,72,1\\n102,74,106,0\\n81,103,225,0\\n161,1,105,0\\n237,21,30,0\\n217,127,112,1\\n22,87,101,0\\n57,184,101,1\\n101,177,125,1\\n232,114,163,1\\n54,122,15,0\\n71,52,165,0\\n122,136,95,0\\n12,207,54,1\\n197,15,36,0\\n166,148,104,1\\n189,17,13,0\\n110,52,145,0\\n189,66,182,0\\n246,61,125,1\\n188,200,62,1\\n143,217,165,1\\n96,52,253,0\\n154,0,62,0\\n201,174,30,1\\n156,227,8,1\\n13,90,229,0\\n219,120,254,1\\n147,59,87,0\\n89,226,66,1\\n175,0,93,0\\n151,97,194,0\\n218,1,95,0\\n251,31,5,0\\n212,46,105,0\\n92,21,59,0\\n102,233,245,1\\n27,241,52,1\\n254,57,15,1\\n240,187,120,1\\n137,210,248,1\\n1,148,56,0\\n161,41,7,0\\n232,76,15,0\\n176,176,112,1\\n152,203,158,1\\n177,221,104,1\\n93,89,189,0\\n187,130,11,1\\n69,100,215,0\\n123,206,245,1\\n136,102,87,0\\n110,251,245,1\\n148,36,237,0\\n121,42,4,0\\n189,135,219,1\\n186,117,105,1\\n232,28,174,1\\n163,37,13,0\\n67,189,184,1\\n98,236,190,1\\n189,139,191,1\\n100,48,181,0\\n25,201,37,1\\n65,243,121,1\\n75,42,195,0\\n95,53,109,0\\n253,237,94,1\\n190,190,154,1\\n31,195,28,1\\n238,17,213,0\\n44,140,229,0\\n56,88,167,0\\n173,42,29,0\\n251,204,119,1\\n25,38,237,0\\n255,234,84,1\\n83,103,203,0\\n12,9,187,0\\n153,109,152,0\\n189,101,245,0\\n59,241,161,1\\n102,238,84,1\\n214,186,96,1\\n98,109,10,0\\n148,218,118,1\\n223,228,162,1\\n58,216,237,1\\n17,208,135,1\\n205,88,2,0\\n251,106,58,1\\n236,205,125,1\\n128,224,225,1\\n146,98,62,0\\n92,74,55,0\\n245,126,232,0\\n57,73,104,0\\n2,50,116,0\\n150,175,44,1\\n122,171,199,1\\n22,5,161,0\\n93,17,213,0\\n213,209,248,1\\n177,125,10,1\\n47,161,174,1\\n153,115,194,0\\n137,152,60,1\\n234,119,6,1\\n146,180,23,1\\n104,76,158,0\\n219,234,0,1\\n200,79,44,0\\n36,3,179,0\\n14,69,12,0\\n151,8,8,0\\n253,246,163,1\\n110,71,209,0\\n122,250,42,1\\n83,239,183,1\\n143,213,119,1\\n75,39,85,0\\n21,2,121,0\\n11,40,26,0\\n27,195,141,1\\n128,22,32,0\\n28,6,33,0\\n8,71,245,0\\n243,168,159,1\\n110,4,148,0\\n212,44,87,0\\n207,150,106,1\\n244,142,159,1\\n180,240,82,1\\n45,200,171,1\\n62,254,177,1\\n13,133,79,0\\n242,163,177,1\\n156,14,71,0\\n71,242,47,1\\n93,253,224,1\\n195,161,18,1\\n207,74,252,1\\n4,0,31,0\\n112,28,56,0\\n98,162,74,0\\n6,82,61,0\\n199,110,177,0\\n128,36,223,0\\n140,64,61,0\\n100,161,193,1\\n216,173,61,1\\n50,215,125,1\\n55,213,148,1\\n172,152,68,1\\n147,61,119,0\\n42,189,208,1\\n93,168,2,1\\n240,174,178,1\\n215,116,228,1\\n20,213,105,1\\n243,236,14,1\\n106,64,208,0\\n206,222,79,1\\n200,227,27,1\\n75,218,148,1\\n254,40,30,0\\n56,96,119,0\\n22,77,230,0\\n47,58,41,0\\n66,52,95,0\\n10,184,191,1\\n77,55,224,0\\n134,130,48,0\\n143,228,181,1\\n49,42,210,0\\n158,177,184,1\\n189,30,154,0\\n117,237,240,1\\n155,129,228,0\\n8,100,128,0\\n33,128,3,0\\n40,124,98,0\\n253,23,245,0\\n33,148,106,0\\n183,98,163,0\\n255,109,41,1\\n243,51,240,0\\n62,220,49,1\\n68,129,210,0\\n110,137,57,0\\n192,51,141,0\\n222,35,68,0\\n184,228,245,1\\n55,222,130,1\\n194,55,205,0\\n84,28,55,0\\n218,62,72,0\\n210,92,156,1\\n150,32,136,0\\n67,132,106,0\\n168,75,35,0\\n57,253,148,1\\n235,229,92,1\\n188,228,44,1\\n126,24,56,0\\n3,141,17,0\\n124,127,163,0\\n40,219,107,1\\n228,125,6,1\\n209,245,172,1\\n124,195,142,1\\n72,199,137,1\\n229,164,178,1\\n124,251,105,1\\n127,150,252,1\\n51,224,17,1\\n189,20,6,0\\n107,13,95,0\\n249,157,52,1\\n137,53,13,0\\n94,97,146,0\\n198,136,169,1\\n101,146,199,1\\n29,148,133,1\\n101,206,194,1\\n198,129,161,1\\n216,45,44,0\\n215,22,160,0\\n71,122,55,0\\n24,128,107,0\\n205,166,238,1\\n251,235,4,1\\n28,232,107,1\\n99,83,78,0\\n207,62,75,0\\n127,209,114,1\\n123,144,131,0\\n84,180,36,1\\n199,176,194,1\\n46,109,37,0\\n80,101,142,0\\n252,160,140,1\\n243,199,230,1\\n70,23,96,0\\n193,217,16,1\\n33,196,55,1\\n25,123,78,0\\n62,15,138,0\\n55,173,220,1\\n22,170,217,1\\n132,203,80,1\\n68,166,32,1\\n224,39,114,0\\n95,137,76,0\\n81,242,235,1\\n49,216,201,1\\n3,34,126,0\\n40,45,183,0\\n14,177,197,1\\n255,17,19,1\\n29,101,110,0\\n131,206,16,1\\n4,201,245,1\\n121,62,98,0\\n3,211,120,1\\n219,197,108,0\\n124,28,189,1\\n189,30,118,1\\n106,140,171,0\\n50,237,41,0\\n118,116,44,1\\n219,81,52,0\\n6,115,231,1\\n46,11,236,1\\n27,108,115,1\\n180,84,203,0\\n197,249,204,0\\n218,2,236,0\\n233,10,89,0\\n204,65,47,0\\n222,64,36,0\\n140,242,150,0\\n67,157,190,1\\n97,183,110,0\\n142,130,223,0\\n0,57,109,1\\n170,60,24,0\\n215,17,82,0\\n187,208,54,0\\n195,211,184,0\\n119,10,204,1\\n91,118,123,1\\n231,48,211,0\\n148,140,211,0\\n194,25,221,0\\n159,41,175,1\\n8,66,93,1\\n23,120,88,1\\n128,52,102,1\\n28,198,152,0\\n18,248,235,0\\n35,112,98,1\\n206,129,91,0\\n40,97,162,1\\n149,26,215,1\\n184,150,66,0\\n104,245,100,0\\n12,184,154,0\\n158,97,85,0\\n44,16,178,1\\n105,91,10,1\\n151,231,77,0\\n14,27,35,1\\n45,15,67,1\\n9,79,182,1\\n177,53,3,0\\n35,168,58,0\\n2,147,167,1\\n59,211,163,0\\n241,243,67,0\\n2,93,24,1\\n255,7,70,0\\n133,197,24,0\\n112,114,10,1\\n115,179,0,0\\n8,104,7,1\\n242,212,199,0\\n91,73,137,1\\n32,216,92,0\\n157,197,9,0\\n65,16,98,1\\n198,187,214,0\\n147,106,25,1\\n75,6,137,1\\n198,80,216,0\\n5,231,233,0\\n187,223,229,0\\n138,250,190,0\\n176,141,72,0\\n206,154,97,0\\n144,150,4,0\\n173,4,60,0\\n203,243,172,0\\n196,142,10,0\\n133,120,92,1\\n248,116,52,0\\n212,171,77,0\\n117,179,241,0\\n45,127,184,1\\n128,4,198,1\\n216,126,218,0\\n63,38,59,1\\n21,137,93,1\\n185,90,175,0\\n138,143,190,0\\n123,235,1,0\\n8,84,130,1\\n35,216,190,0\\n17,148,95,1\\n35,210,129,0\\n9,168,174,1\\n85,155,183,1\\n150,196,87,0\\n129,108,5,1\\n115,53,188,1\\n75,223,90,0\\n163,214,210,0\\n110,170,84,1\\n123,73,197,1\\n74,68,134,1\\n156,32,245,0\\n231,110,148,0\\n8,237,115,0\\n142,40,41,1\\n198,75,83,0\\n243,117,10,0\\n41,230,121,0\\n101,210,23,0\\n214,174,209,0\\n200,43,215,1\\n56,83,182,1\\n226,166,213,0\\n68,97,139,1\\n63,52,145,1\\n193,200,100,0\\n70,108,151,1\\n63,201,86,0\\n187,145,25,0\\n165,84,255,1\\n250,196,209,0\\n27,230,131,0\\n59,226,106,0\\n115,34,74,1\\n135,169,165,0\\n66,69,230,1\\n98,244,141,0\\n124,170,174,0\\n0,26,162,1\\n193,204,25,0\\n49,18,59,1\\n190,242,57,0\\n102,244,253,0\\n59,235,198,0\\n91,78,132,1\\n234,222,136,0\\n119,69,59,1\\n71,2,128,1\\n23,61,12,1\\n102,230,214,0\\n189,99,50,0\\n180,130,196,0\\n48,59,172,1\\n165,212,5,0\\n150,138,153,0\\n61,87,127,1\\n54,179,197,1\\n45,195,139,0\\n41,86,48,1\\n166,70,16,1\\n197,158,58,0\\n150,171,119,0\\n17,33,211,1\\n223,135,54,0\\n41,22,189,1\\n200,242,120,0\\n91,72,114,1\\n96,221,141,0\\n248,225,99,0\\n130,22,93,1\\n224,213,1,0\\n174,0,193,1\\n16,184,154,0\\n242,42,177,0\\n73,16,156,1\\n155,143,176,0\\n185,12,246,0\\n205,199,24,0\\n112,230,137,0\\n181,98,182,0\\n83,80,140,1\\n106,39,31,1\\n119,164,68,0\\n80,116,14,1\\n100,101,128,1\\n58,7,93,1\\n50,187,16,0\\n83,102,215,1\\n49,102,61,1\\n183,5,199,0\\n140,79,58,1\\n15,88,59,1\\n103,222,90,0\\n183,182,89,0\\n85,163,115,1\\n170,97,176,0\\n118,18,165,1\\n189,146,154,0\\n51,16,115,1\\n208,41,43,0\\n95,66,236,1\\n239,212,50,0\\n151,93,225,1\\n154,173,115,0\\n244,17,73,0\\n80,200,204,0\\n23,225,211,0\\n170,12,115,1\\n185,64,120,1\\n101,90,63,1\\n33,216,130,0\\n37,111,247,1\\n158,149,218,0\\n211,206,188,0\\n139,136,205,0\\n132,196,10,0\\n241,141,24,0\\n201,172,193,0\\n90,176,245,0\\n135,183,185,0\\n41,112,88,1\\n108,85,115,1\\n27,165,169,0\\n50,16,190,1\\n28,23,88,1\\n37,91,20,1\\n159,100,39,1\\n231,160,114,0\\n126,82,165,1\\n204,231,116,0\\n253,23,140,1\\n37,146,172,0\\n40,77,100,1\\n46,237,58,0\\n78,166,128,1\\n153,34,122,1\\n149,164,40,1\\n134,191,127,0\\n234,134,174,0\\n160,227,82,0\\n71,88,164,1\\n15,40,156,1\\n62,235,216,0\\n254,83,31,1\\n204,107,124,1\\n193,66,14,1\\n3,12,209,1\\n56,6,168,1\\n248,198,222,0\\n135,20,234,1\\n238,79,149,1\\n81,82,92,1\\n125,213,16,0\\n34,233,173,0\\n48,49,71,1\\n35,32,179,1\\n147,55,5,1\\n160,3,6,1\\n203,111,224,0\\n111,221,233,0\\n248,12,92,0\\n150,33,220,1\\n133,217,248,0\\n226,38,160,1\\n37,88,147,1\\n33,180,226,0\\n22,180,159,0\\n230,58,89,1\\n1,236,221,0\\n21,132,122,1\\n15,165,23,1\\n23,28,153,1\\n232,233,107,0\\n27,162,89,1\\n10,169,180,1\\n167,193,56,0\\n173,91,77,1\\n33,229,6,0\\n23,168,156,1\\n103,4,170,1\\n93,114,95,1\\n123,241,107,0\\n82,21,143,1\\n10,112,56,1\\n245,226,210,0\\n179,153,43,1\\n50,27,2,1\\n213,113,100,1\\n125,175,75,1\\n213,56,158,1\\n103,67,159,1\\n33,185,191,0\\n104,107,113,1\\n17,17,182,1\\n58,50,226,1\\n52,16,231,1\\n117,223,32,0\\n139,94,183,1\\n173,235,181,0\\n143,21,38,1\\n71,7,42,1\\n90,174,128,0\\n63,237,138,0\\n184,99,63,1\\n142,251,240,0\\n136,183,146,0\\n139,162,72,0\\n23,43,75,1\\n71,249,160,0\\n44,49,42,1\\n10,246,139,0\\n39,89,179,1\\n153,205,113,0\\n0,98,136,1\\n242,226,75,0\\n246,180,100,0\\n241,26,150,1\\n241,39,6,1\\n204,113,204,1\\n151,201,209,0\\n246,111,201,0\\n153,80,187,1\\n194,158,68,1\\n24,106,112,1\\n108,204,206,0\\n82,38,57,1\\n210,24,226,1\\n7,170,88,0\\n178,98,142,1\\n195,214,182,0\\n219,104,198,1\\n42,16,46,1\\n137,136,34,1\\n141,212,181,0\\n34,159,94,1\\n228,47,128,1\\n112,104,184,1\\n56,193,88,0\\n241,161,154,0\\n156,153,237,1\\n62,182,74,1\\n84,152,58,1\\n182,38,155,1\\n55,247,125,0\\n247,136,36,0\\n164,80,148,1\\n235,110,58,0\\n201,94,173,1\\n175,148,131,1\\n144,0,127,1\\n3,36,194,1\\n51,46,251,1\\n163,118,111,1\\n28,157,57,1\\n207,21,27,1\\n235,93,245,1\\n66,112,65,1\\n135,143,220,1\\n49,93,251,1\\n3,44,97,1\\n57,101,213,1\\n231,45,143,1\\n176,67,178,1\\n190,13,165,1\\n226,136,197,0\\n221,55,218,1\\n249,197,146,0\\n18,108,22,1\\n0,135,207,1\\n39,59,111,1\\n124,74,9,1\\n210,173,210,0\\n99,150,190,0\\n89,148,186,0\\n91,203,108,0\\n83,222,202,0\\n72,119,187,1\\n90,153,62,1\\n198,162,232,0\\n92,146,249,0\\n96,44,211,1\\n35,249,140,0\\n16,118,51,1\\n119,89,124,1\\n207,227,199,0\\n198,167,159,0\\n192,227,150,0\\n47,33,30,1\\n254,242,203,0\\n168,157,41,0\\n122,162,83,0\\n84,186,1,0\\n162,120,239,1\\n161,73,171,1\\n180,31,134,1\\n66,145,50,1\\n4,63,165,1\\n225,7,234,1\\n66,56,156,1\\n41,15,194,1\\n238,190,72,0\\n85,99,202,1\\n244,191,188,0\\n102,7,213,1\\n219,43,129,1\\n130,150,161,1\\n41,190,29,0\\n18,137,210,1\\n184,161,32,1\\n157,38,231,1\\n123,174,50,0\\n140,141,219,1\\n37,244,183,0\\n241,25,58,1\\n165,122,88,1\\n144,171,64,1\\n129,162,88,1\\n157,174,122,0\\n213,246,153,0\\n8,199,147,0\\n158,198,69,0\\n248,251,239,0\\n24,115,116,1\\n15,132,245,1\\n148,30,2,1\\n190,108,6,1\\n100,25,41,1\\n187,11,224,1\\n20,79,243,1\\n28,14,137,1\\n254,19,61,1\\n117,98,132,1\\n92,234,94,0\\n24,198,47,0\\n137,107,243,1\\n189,70,103,1\\n154,114,253,1\\n72,171,3,0\\n157,53,13,1\\n31,29,28,1\\n12,96,211,1\\n224,242,84,0\\n207,33,42,1\\n71,147,116,1\\n101,92,29,1\\n216,188,152,0\\n190,191,243,0\\n225,47,220,1\\n88,123,196,1\\n232,29,88,1\\n60,26,245,1\\n178,247,200,0\\n137,134,246,1\\n205,204,57,0\\n71,40,154,1\\n98,122,169,1\\n190,30,42,1\\n93,40,0,1\\n84,107,237,1\\n234,183,97,0\\n137,16,107,1\\n242,228,196,0\\n140,86,0,1\\n77,255,61,0\\n143,153,45,1\\n145,214,2,0\\n68,45,129,1\\n22,15,174,1\\n2,213,29,0\\n24,175,1,0\\n11,80,54,1\\n91,132,141,1\\n120,57,36,1\\n167,207,217,0\\n87,172,211,0\\n97,162,86,0\\n111,222,29,0\\n218,42,222,1\\n176,165,205,0\\n98,226,94,0\\n105,216,112,0\\n250,36,190,1\\n84,161,36,1\\n38,58,49,1\\n228,29,253,1\\n37,140,57,1\\n18,182,72,0\\n36,172,166,0\\n197,54,189,1\\n122,220,33,0\\n33,3,58,1\\n74,46,125,1\\n218,42,166,1\\n154,156,112,0\\n64,139,106,1\\n18,76,35,1\\n216,41,87,1\\n124,68,187,1\\n172,30,69,1\\n11,173,215,0\\n49,134,91,1\\n3,182,113,0\\n233,62,101,1\\n215,23,22,1\\n158,35,22,1\\n37,67,8,1\\n96,101,12,1\\n142,189,25,0\\n38,179,22,0\\n42,243,170,0\\n8,73,243,1\\n214,77,10,1\\n175,125,206,0\\n160,74,181,1\\n59,217,167,0\\n171,110,238,1\\n251,64,59,1\\n77,23,215,1\\n74,124,87,1\\n49,48,107,1\\n209,93,159,0\\n187,11,14,1\\n103,211,192,0\\n154,25,11,1\\n127,244,99,0\\n131,36,47,1\\n54,241,127,0\\n33,200,43,0\\n131,155,59,0\\n34,119,165,1\\n158,135,21,1\\n199,23,116,1\\n54,27,113,1\\n170,233,152,0\\n143,225,143,0\\n90,141,117,1\\n18,66,160,1\\n15,247,238,0\\n61,87,66,1\\n21,23,162,1\\n186,231,199,0\\n228,252,242,0\\n229,160,214,0\\n244,236,216,0\\n226,142,51,1\\n185,43,38,1\\n5,254,70,0\\n184,239,180,0\\n252,221,152,0\\n61,70,86,1\\n77,110,166,1\\n190,231,56,0\\n170,153,70,1\\n102,248,156,0\\n232,202,43,0\\n169,241,242,0\\n152,44,223,1\\n68,17,89,1\\n94,170,112,1\\n157,248,2,0\\n214,125,128,0\\n16,194,250,0\\n221,252,140,0\\n221,92,115,1\\n113,98,223,1\\n124,131,117,1\\n69,213,1,0\\n18,132,44,1\\n242,114,138,0\\n127,192,19,0\\n153,32,253,1\\n228,134,75,0\\n143,68,179,1\\n204,174,204,0\\n34,100,163,1\\n134,209,203,0\\n153,88,43,1\\n135,224,148,0\\n137,80,206,1\\n93,92,65,1\\n20,121,208,1\\n69,203,8,0\\n72,48,161,1\\n97,177,16,1\\n200,219,170,0\\n212,98,25,1\\n141,120,169,1\\n252,190,113,0\\n50,116,171,1\\n213,142,85,0\\n144,225,229,0\\n220,114,8,1\\n51,2,149,1\\n132,18,83,1\\n228,159,97,0\\n198,215,198,0\\n1,201,148,0\\n94,155,105,1\\n48,67,20,1\\n208,31,26,1\\n206,12,97,1\";\n// let tr =0;\n\"16,198,131,0\\n239,174,171,0\\n232,28,74,1\\n139,92,135,1\\n179,59,158,1\\n175,139,141,1\\n126,159,6,1\\n17,186,173,0\\n92,16,182,1\\n254,103,246,0\\n177,3,179,1\\n253,147,230,0\\n155,206,235,0\\n24,164,193,0\\n225,243,134,0\\n100,44,61,1\\n173,55,83,1\\n110,98,151,1\\n231,45,146,1\\n231,14,76,1\\n56,209,71,0\\n199,98,14,1\\n187,217,9,0\\n223,42,20,1\\n111,109,189,1\\n54,220,25,0\\n49,62,208,1\\n173,137,101,1\\n57,226,119,0\\n95,13,165,1\\n67,220,81,0\\n12,112,119,1\\n141,201,207,0\\n60,251,215,0\\n161,164,238,0\\n107,139,25,1\\n167,143,190,1\\n10,161,96,1\\n217,214,17,0\\n39,150,238,0\\n40,169,134,0\\n140,67,216,1\\n68,32,236,1\\n132,228,183,0\\n141,76,158,1\\n168,63,138,1\\n37,104,152,1\\n205,52,124,1\\n41,215,86,0\\n221,12,174,1\\n120,44,81,1\\n94,152,114,1\\n218,33,166,1\\n169,173,167,0\\n96,105,22,1\\n18,201,107,0\\n30,217,18,0\\n240,181,122,0\\n232,85,71,0\\n246,82,32,0\\n185,22,199,1\\n90,201,129,0\\n247,22,219,1\\n236,208,59,0\\n225,185,86,0\\n212,75,124,1\\n135,187,135,0\\n127,184,146,0\\n61,230,106,0\\n60,48,241,1\\n189,155,57,0\\n243,39,10,1\\n51,229,175,0\\n15,96,185,1\\n4,57,169,1\\n109,175,112,0\\n189,221,0,0\\n159,66,122,1\\n116,36,79,1\\n72,18,114,1\\n164,50,181,1\\n82,195,149,0\\n202,211,171,0\\n48,227,205,0\\n23,19,37,1\\n196,221,53,0\\n176,176,7,0\\n232,138,29,0\\n104,122,215,1\\n78,10,68,1\\n101,230,98,0\\n148,211,21,0\\n54,239,159,0\\n110,181,195,0\\n133,55,176,1\\n223,65,103,1\\n189,217,96,0\\n117,79,172,1\\n78,13,140,1\\n183,182,177,0\\n159,72,22,1\\n53,103,155,1\\n251,253,248,0\\n24,117,165,1\\n150,14,83,1\\n250,134,161,0\\n5,18,249,1\\n47,172,61,0\\n245,141,177,0\\n85,113,48,1\\n104,43,46,1\\n102,234,19,0\\n217,221,199,0\\n167,125,221,1\\n68,180,182,0\\n115,114,199,1\\n170,126,72,1\\n126,223,252,0\\n121,154,180,0\\n90,249,246,0\\n214,105,106,1\\n125,91,51,1\\n165,138,235,0\\n155,142,186,0\\n228,202,198,0\\n62,183,156,0\\n94,26,121,1\\n61,241,36,0\\n67,96,252,1\\n172,7,43,1\\n25,123,201,1\\n82,9,227,1\\n52,131,157,1\\n121,115,150,1\\n243,167,123,0\\n91,87,65,1\\n115,16,254,1\\n110,20,52,1\\n129,251,224,0\\n211,71,178,1\\n140,29,23,1\\n100,198,189,0\\n131,73,216,1\\n41,70,3,1\\n213,167,148,0\\n94,253,16,0\\n200,106,177,1\\n38,198,30,0\\n67,19,202,1\\n236,220,97,0\\n137,43,73,1\\n158,202,77,0\\n72,170,7,0\\n199,15,46,1\\n50,240,66,0\\n105,132,107,1\\n169,252,153,0\\n165,105,29,1\\n123,231,229,0\\n172,124,73,1\\n136,250,3,0\\n120,198,67,0\\n197,63,58,1\\n6,46,199,1\\n36,100,197,1\\n124,100,219,1\\n3,62,80,1\\n41,4,50,1\\n120,242,11,0\\n1,27,3,1\\n45,46,143,1\\n216,57,77,1\\n27,85,63,1\\n99,168,85,0\\n38,227,122,0\\n142,28,255,1\\n184,118,107,0\\n64,103,7,1\\n111,140,167,0\\n87,245,251,0\\n175,185,57,0\\n52,125,223,1\\n44,202,250,0\\n102,60,64,1\\n22,146,151,1\\n139,76,196,1\\n35,53,74,1\\n179,119,171,0\\n123,209,51,0\\n200,43,216,1\\n156,98,199,1\\n33,127,240,0\\n138,176,20,0\\n181,60,226,1\\n163,60,75,1\\n226,208,147,0\\n255,78,121,0\\n212,245,110,0\\n199,211,74,0\\n158,80,32,1\\n141,237,96,0\\n7,72,234,1\\n235,33,14,1\\n178,250,80,0\\n59,31,232,1\\n67,111,53,1\\n173,38,174,1\\n153,59,40,1\\n246,224,104,0\\n145,148,11,1\\n91,223,17,0\\n198,103,15,1\\n63,140,71,1\\n195,53,174,1\\n122,156,189,0\\n226,182,123,0\\n134,179,35,0\\n147,127,75,0\\n6,161,17,0\\n96,167,231,0\\n114,126,220,0\\n40,176,218,0\\n58,107,92,1\\n192,70,158,1\\n134,138,239,0\\n13,178,72,0\\n29,8,137,1\\n154,208,132,0\\n91,88,27,1\\n7,104,206,1\\n69,132,173,1\\n190,188,99,0\\n201,106,101,0\\n6,67,205,1\\n148,45,96,1\\n145,189,64,0\\n199,75,154,1\\n203,140,239,0\\n19,202,134,0\\n40,126,117,1\\n215,125,118,0\\n3,172,130,0\\n212,187,70,0\\n98,51,30,1\\n60,153,132,0\\n37,115,91,1\\n78,97,115,1\\n230,182,225,0\\n58,177,25,0\\n246,30,205,1\\n34,169,93,0\\n174,148,250,0\\n20,227,83,0\\n78,201,16,0\\n193,42,150,1\\n28,143,179,1\\n5,196,82,0\\n55,215,202,0\\n21,70,42,1\\n66,195,249,0\\n249,246,81,0\\n136,73,188,1\\n204,111,107,0\\n129,222,221,0\\n216,42,173,1\\n39,48,28,1\\n50,223,168,0\\n212,173,84,0\\n81,34,131,1\\n194,80,251,0\\n228,15,188,1\\n168,238,101,0\\n11,192,220,0\\n148,171,211,0\\n245,89,81,0\\n27,146,164,0\\n65,184,33,0\\n43,90,245,1\\n172,254,237,0\\n18,180,254,0\\n246,233,238,0\\n12,179,128,0\\n183,168,249,0\\n213,105,56,0\\n42,188,237,0\\n22,153,254,0\\n105,238,160,0\\n247,204,11,0\\n24,16,238,1\\n180,231,157,0\\n108,245,155,0\\n103,200,141,0\\n139,139,189,0\\n100,178,198,0\\n44,117,27,1\\n243,128,179,0\\n1,51,50,1\\n209,34,243,1\\n147,77,43,1\\n170,21,47,1\\n238,45,148,1\\n177,166,220,0\\n168,69,22,1\\n52,193,88,0\\n151,74,81,1\\n32,26,99,1\\n226,60,170,1\\n68,119,99,1\\n88,97,196,1\\n33,15,93,1\\n238,86,99,0\\n133,178,117,0\\n249,233,11,0\\n25,147,146,0\\n220,245,143,0\\n29,143,63,0\\n63,187,107,0\\n32,30,57,1\\n22,171,136,0\\n96,212,74,0\\n238,135,221,0\\n239,97,252,0\\n143,233,193,0\\n148,229,91,0\\n49,235,247,0\\n230,230,225,0\\n224,227,46,0\\n170,29,211,1\\n121,84,141,1\\n39,187,96,0\\n109,247,22,0\\n209,147,199,0\\n48,145,232,0\\n179,74,179,1\\n26,24,179,1\\n127,87,1,1\\n39,3,0,1\\n160,15,82,1\\n162,158,221,0\\n237,213,57,0\\n188,68,63,1\\n96,10,60,1\\n39,181,216,0\\n70,226,251,0\\n76,230,222,0\\n175,150,182,0\\n141,48,94,1\\n132,48,231,1\\n138,89,31,1\\n165,117,17,1\\n3,251,244,0\\n128,55,4,1\\n216,52,14,1\\n19,185,26,0\\n211,134,129,0\\n20,106,47,1\\n93,47,181,1\\n31,219,48,0\\n167,252,192,0\\n69,26,223,1\\n181,69,68,1\\n166,68,120,1\\n179,187,91,0\\n165,83,56,1\\n196,104,184,0\\n60,106,193,1\\n86,64,79,1\\n83,103,37,1\\n57,159,89,0\\n112,85,208,1\\n45,2,230,1\\n68,122,157,0\\n30,72,32,1\\n137,239,228,0\\n141,44,244,1\\n43,12,220,1\\n86,164,141,0\\n79,96,80,1\\n225,194,174,0\\n153,143,169,0\\n28,34,245,1\\n187,221,158,0\\n154,13,19,1\\n188,217,117,0\\n96,187,42,0\\n114,0,13,1\\n195,219,3,0\\n55,205,112,0\\n108,174,193,0\\n79,62,191,1\\n159,88,198,1\\n233,35,19,1\\n254,225,221,0\\n88,170,200,0\\n177,87,170,1\\n221,119,114,1\\n21,232,137,0\\n50,5,72,1\\n161,67,76,1\\n10,200,199,0\\n228,69,81,0\\n29,38,215,1\\n219,166,230,0\\n115,67,73,1\\n202,204,29,0\\n236,217,148,0\\n14,208,114,0\\n138,44,100,1\\n12,169,80,0\\n0,204,199,0\\n217,137,201,0\\n97,44,37,1\\n35,229,183,0\\n142,249,17,0\\n239,76,225,1\\n188,190,1,0\\n138,170,111,0\\n3,132,100,0\\n66,104,55,1\\n111,178,22,0\\n98,24,164,1\\n71,194,229,0\\n88,13,39,1\\n72,215,133,0\\n114,192,101,0\\n179,7,2,1\\n241,134,215,0\\n236,108,223,0\\n216,14,86,1\\n137,57,230,1\\n22,242,119,0\\n76,15,147,1\\n181,214,146,0\\n164,199,40,0\\n214,111,243,0\\n48,216,220,0\\n94,20,181,1\\n120,177,115,0\\n253,118,32,0\\n79,14,128,1\\n255,147,171,0\\n22,76,239,1\\n169,157,131,0\\n153,202,79,0\\n84,233,223,0\\n237,8,224,1\\n85,20,247,1\\n46,182,247,0\\n28,68,106,1\\n70,19,77,1\\n31,100,238,1\\n89,181,52,0\\n60,137,204,0\\n144,161,132,0\\n59,144,50,0\\n181,182,95,0\\n195,95,89,0\\n194,138,224,0\\n11,196,72,0\\n102,74,106,1\\n81,103,225,1\\n161,1,105,1\\n237,21,30,1\\n217,127,112,0\\n22,87,101,1\\n57,184,101,0\\n101,177,125,0\\n232,114,163,0\\n54,122,15,1\\n71,52,165,1\\n122,136,95,1\\n12,207,54,0\\n197,15,36,1\\n166,148,104,0\\n189,17,13,1\\n110,52,145,1\\n189,66,182,1\\n246,61,125,0\\n188,200,62,0\\n143,217,165,0\\n96,52,253,1\\n154,0,62,1\\n201,174,30,0\\n156,227,8,0\\n13,90,229,1\\n219,120,254,0\\n147,59,87,1\\n89,226,66,0\\n175,0,93,1\\n151,97,194,1\\n218,1,95,1\\n251,31,5,1\\n212,46,105,1\\n92,21,59,1\\n102,233,245,0\\n27,241,52,0\\n254,57,15,0\\n240,187,120,0\\n137,210,248,0\\n1,148,56,1\\n161,41,7,1\\n232,76,15,1\\n176,176,112,0\\n152,203,158,0\\n177,221,104,0\\n93,89,189,1\\n187,130,11,0\\n69,100,215,1\\n123,206,245,0\\n136,102,87,1\\n110,251,245,0\\n148,36,237,1\\n121,42,4,1\\n189,135,219,0\\n186,117,105,0\\n232,28,174,0\\n163,37,13,1\\n67,189,184,0\\n98,236,190,0\\n189,139,191,0\\n100,48,181,1\\n25,201,37,0\\n65,243,121,0\\n75,42,195,1\\n95,53,109,1\\n253,237,94,0\\n190,190,154,0\\n31,195,28,0\\n238,17,213,1\\n44,140,229,1\\n56,88,167,1\\n173,42,29,1\\n251,204,119,0\\n25,38,237,1\\n255,234,84,0\\n83,103,203,1\\n12,9,187,1\\n153,109,152,1\\n189,101,245,1\\n59,241,161,0\\n102,238,84,0\\n214,186,96,0\\n98,109,10,1\\n148,218,118,0\\n223,228,162,0\\n58,216,237,0\\n17,208,135,0\\n205,88,2,1\\n251,106,58,0\\n236,205,125,0\\n128,224,225,0\\n146,98,62,1\\n92,74,55,1\\n245,126,232,1\\n57,73,104,1\\n2,50,116,1\\n150,175,44,0\\n122,171,199,0\\n22,5,161,1\\n93,17,213,1\\n213,209,248,0\\n177,125,10,0\\n47,161,174,0\\n153,115,194,1\\n137,152,60,0\\n234,119,6,0\\n146,180,23,0\\n104,76,158,1\\n219,234,0,0\\n200,79,44,1\\n36,3,179,1\\n14,69,12,1\\n151,8,8,1\\n253,246,163,0\\n110,71,209,1\\n122,250,42,0\\n83,239,183,0\\n143,213,119,0\\n75,39,85,1\\n21,2,121,1\\n11,40,26,1\\n27,195,141,0\\n128,22,32,1\\n28,6,33,1\\n8,71,245,1\\n243,168,159,0\\n110,4,148,1\\n212,44,87,1\\n207,150,106,0\\n244,142,159,0\\n180,240,82,0\\n45,200,171,0\\n62,254,177,0\\n13,133,79,1\\n242,163,177,0\\n156,14,71,1\\n71,242,47,0\\n93,253,224,0\\n195,161,18,0\\n207,74,252,0\\n4,0,31,1\\n112,28,56,1\\n98,162,74,1\\n6,82,61,1\\n199,110,177,1\\n128,36,223,1\\n140,64,61,1\\n100,161,193,0\\n216,173,61,0\\n50,215,125,0\\n55,213,148,0\\n172,152,68,0\\n147,61,119,1\\n42,189,208,0\\n93,168,2,0\\n240,174,178,0\\n215,116,228,0\\n20,213,105,0\\n243,236,14,0\\n106,64,208,1\\n206,222,79,0\\n200,227,27,0\\n75,218,148,0\\n254,40,30,1\\n56,96,119,1\\n22,77,230,1\\n47,58,41,1\\n66,52,95,1\\n10,184,191,0\\n77,55,224,1\\n134,130,48,1\\n143,228,181,0\\n49,42,210,1\\n158,177,184,0\\n189,30,154,1\\n117,237,240,0\\n155,129,228,1\\n8,100,128,1\\n33,128,3,1\\n40,124,98,1\\n253,23,245,1\\n33,148,106,1\\n183,98,163,1\\n255,109,41,0\\n243,51,240,1\\n62,220,49,0\\n68,129,210,1\\n110,137,57,1\\n192,51,141,1\\n222,35,68,1\\n184,228,245,0\\n55,222,130,0\\n194,55,205,1\\n84,28,55,1\\n218,62,72,1\\n210,92,156,0\\n150,32,136,1\\n67,132,106,1\\n168,75,35,1\\n57,253,148,0\\n235,229,92,0\\n188,228,44,0\\n126,24,56,1\\n3,141,17,1\\n124,127,163,1\\n40,219,107,0\\n228,125,6,0\\n209,245,172,0\\n124,195,142,0\\n72,199,137,0\\n229,164,178,0\\n124,251,105,0\\n127,150,252,0\\n51,224,17,0\\n189,20,6,1\\n107,13,95,1\\n249,157,52,0\\n137,53,13,1\\n94,97,146,1\\n198,136,169,0\\n101,146,199,0\\n29,148,133,0\\n101,206,194,0\\n198,129,161,0\\n216,45,44,1\\n215,22,160,1\\n71,122,55,1\\n24,128,107,1\\n205,166,238,0\\n251,235,4,0\\n28,232,107,0\\n99,83,78,1\\n207,62,75,1\\n127,209,114,0\\n123,144,131,1\\n84,180,36,0\\n199,176,194,0\\n46,109,37,1\\n80,101,142,1\\n252,160,140,0\\n243,199,230,0\\n70,23,96,1\\n193,217,16,0\\n33,196,55,0\\n25,123,78,1\\n62,15,138,1\\n55,173,220,0\\n22,170,217,0\\n132,203,80,0\\n68,166,32,0\\n224,39,114,1\\n95,137,76,1\\n81,242,235,0\\n49,216,201,0\\n3,34,126,1\\n40,45,183,1\\n14,177,197,0\\n255,17,19,0\\n29,101,110,1\\n131,206,16,0\\n4,201,245,0\\n121,62,98,1\\n3,211,120,0\";\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ })

/******/ });